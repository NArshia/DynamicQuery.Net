
<!DOCTYPE html>
<!-- saved from url=(0051)https://nasirjafarzadeh.github.io/DynamicQuery.Net/ -->
<html lang="en-us" class="gr__nasirjafarzadeh_github_io">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <title>DynamicQuery.Net</title>
    <meta name="description" content="Dynamic filtering for IQueryable collections in C#.net">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="theme-color" content="#157878">
    <link href="./DynamicQuery.Net_files/css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="./DynamicQuery.Net_files/style.css">
</head>
<body data-gr-c-s-loaded="true">
    <section class="page-header">
        <h1 class="project-name">DynamicQuery.Net</h1>
        <h2 class="project-tagline">Dynamic filtering for IQueryable collections in C#.net</h2>

        <a href="https://github.com/NasirJafarzadeh/DynamicQuery.Net" class="btn">View on GitHub</a>


    </section>

    <section class="main-content">
        <h1 id="dynamicquerynet">DynamicQuery.Net</h1>

        <p>for Querying an IQueryable in the normal approach you should write any predicates statically in your code, but if you want to have a dynamic Query you can use Expression Trees, this package used it!</p>

        <p>if you search at this subject you will find  <a href="https://www.nuget.org/packages/DynamicQuery">DynamicQuery</a> that is so exhaustive, but in performance, this package is faster than that more than two hundred percent!</p>

        <h1 id="how-to-use">How to use</h1>

        <h2 id="install-nuget-package"><a href="https://www.nuget.org/packages/DynamicQuery.Net">Install Nuget Package</a></h2>
        <div class="highlighter-rouge">
            <pre class="highlight"><code>$ Install-Package DynamicQuery.Net
</code></pre>
        </div>

        <h2 id="dynamic-filtering">Dynamic Filtering:</h2>

        <p>Creating FilterInput object:</p>

        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code><span class="kt">var</span> <span class="n">filerInput</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FilterInput</span>
            <span class="p">{</span>
            <span class="n">Operation</span> <span class="p">=</span> <span class="n">OperationTypeEnum</span><span class="p">.</span><span class="n">GreaterThan</span><span class="p">,</span>
            <span class="n">Property</span> <span class="p">=</span> <span class="s">"Date"</span><span class="p">,</span>
            <span class="n">Type</span> <span class="p">=</span> <span class="n">InputTypeEnum</span><span class="p">.</span><span class="n">String</span><span class="p">,</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="s">"2017/04/08"</span>
            <span class="p">};</span>
</code></pre>
        </div>
        <p>if you want to filter more than one field , you can create a List of FilterInput objects</p>
        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code><span class="kt">var</span> <span class="n">filerInput</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">FilterInput</span><span class="p">&gt;</span>
            <span class="p">{</span>
            <span class="k">new</span> <span class="n">FilterInput</span>
            <span class="p">{</span>
            <span class="n">Operation</span> <span class="p">=</span> <span class="n">OperationTypeEnum</span><span class="p">.</span><span class="n">GreaterThan</span><span class="p">,</span>
            <span class="n">Property</span> <span class="p">=</span> <span class="s">"Date"</span><span class="p">,</span>
            <span class="n">Type</span> <span class="p">=</span> <span class="n">InputTypeEnum</span><span class="p">.</span><span class="n">String</span><span class="p">,</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="s">"2017/04/08"</span>
            <span class="p">}</span>
            <span class="p">};</span>
</code></pre>
        </div>

        <p>if you want to have more than one value for a single field, you can feed Value with a List:</p>
        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code><span class="kt">var</span> <span class="n">filerInput</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">FilterInput</span><span class="p">&gt;</span>
            <span class="p">{</span>
            <span class="k">new</span> <span class="n">FilterInput</span>
            <span class="p">{</span>
            <span class="n">Operation</span> <span class="p">=</span> <span class="n">OperationTypeEnum</span><span class="p">.</span><span class="n">NotEqual</span><span class="p">,</span>
            <span class="n">Property</span> <span class="p">=</span> <span class="s">"ClassNo"</span><span class="p">,</span>
            <span class="n">Type</span> <span class="p">=</span> <span class="n">InputTypeEnum</span><span class="p">.</span><span class="n">Number</span><span class="p">,</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;{</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">}</span>
            <span class="p">}</span>
            <span class="p">};</span>
</code></pre>
        </div>

        <p>Using FilterInput object</p>

        <p>Now we can use our filterInput variable:</p>

        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code><span class="n">myQueryable</span> <span class="p">=</span> <span class="n">myQueryable</span><span class="p">.</span><span class="nf">Filter</span><span class="p">(</span><span class="n">filerInput</span><span class="p">);</span>
</code></pre>
        </div>

        <h2 id="dynamic-ordering">Dynamic Ordering</h2>

        <p>Creating OrderInput object:</p>

        <p>For a single field:</p>
        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code> <span class="kt">var</span> <span class="n">orderItem</span> <span class="p">=</span> <span class="k">new</span> <span class="n">OrderInput</span> <span class="p">{</span><span class="n">Order</span> <span class="p">=</span> <span class="n">OrderTypeEnum</span><span class="p">.</span><span class="n">Desc</span><span class="p">,</span> <span class="n">Property</span> <span class="p">=</span> <span class="s">"Date"</span><span class="p">};</span>
</code></pre>
        </div>

        <p>For a List of fields:</p>

        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code> <span class="kt">var</span> <span class="n">orderInput</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">OrderInput</span><span class="p">&gt;</span>
            <span class="p">{</span>
            <span class="k">new</span> <span class="n">OrderInput</span> <span class="p">{</span><span class="n">Order</span> <span class="p">=</span> <span class="n">OrderTypeEnum</span><span class="p">.</span><span class="n">Desc</span><span class="p">,</span> <span class="n">Property</span> <span class="p">=</span> <span class="s">"Date"</span><span class="p">},</span>
            <span class="k">new</span> <span class="n">OrderInput</span> <span class="p">{</span><span class="n">Order</span> <span class="p">=</span> <span class="n">OrderTypeEnum</span><span class="p">.</span><span class="n">Asc</span><span class="p">,</span> <span class="n">Property</span> <span class="p">=</span> <span class="s">"Name"</span><span class="p">},</span>
            <span class="k">new</span> <span class="n">OrderInput</span> <span class="p">{</span><span class="n">Order</span> <span class="p">=</span> <span class="n">OrderTypeEnum</span><span class="p">.</span><span class="n">Asc</span><span class="p">,</span> <span class="n">Property</span> <span class="p">=</span> <span class="s">"ID"</span><span class="p">}</span>
            <span class="p">};</span>
</code></pre>
        </div>

        <p>Using OrderInput object:</p>

        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code><span class="n">myQueryable</span> <span class="p">=</span> <span class="n">myQueryable</span><span class="p">.</span><span class="nf">Order</span><span class="p">(</span><span class="n">orderInput</span><span class="p">);</span>
</code></pre>
        </div>

        <h2 id="both-of-filtering-and-ordering">Both of Filtering and Ordering:</h2>

        <p>Creating and Using OrderFilterInput object</p>

        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code><span class="kt">var</span> <span class="n">orderFilterInput</span> <span class="p">=</span> <span class="k">new</span> <span class="n">OrderFilterInput</span> 
            <span class="p">{</span>
            <span class="n">Filter</span> <span class="p">=</span> <span class="n">filerInput</span><span class="p">,</span>
            <span class="n">Order</span> <span class="p">=</span> <span class="n">orderInput</span>
            <span class="p">}</span>
               
            <span class="n">myQueryable</span> <span class="p">=</span> <span class="n">myQueryable</span><span class="p">.</span><span class="nf">Filter</span><span class="p">(</span><span class="n">orderFilterInput</span><span class="p">);</span> 
</code></pre>
        </div>

        <h2 id="orderfilternonfilterinput">OrderFilterNonFilterInput</h2>

        <p>If you want to send some objects to the server that you won’t use it as a Filter in IQueryable, you can use NonFilter Dictionary.</p>

        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code>
<span class="kt">var</span> <span class="n">nonFilterInput</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span>
            <span class="p">{</span>
            <span class="p">{</span><span class="s">"TestName1"</span><span class="p">,</span> <span class="s">"TestValue1"</span><span class="p">},</span>
            <span class="p">{</span><span class="s">"TestName2"</span><span class="p">,</span> <span class="s">"TestValue2"</span><span class="p">},</span>
            <span class="p">{</span><span class="s">"TestName3"</span><span class="p">,</span> <span class="s">"TestValue3"</span><span class="p">}</span>
            <span class="p">};</span>

            <span class="kt">var</span> <span class="n">orderFilterNonFilterInput</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">OrderFilterNonFilterInput</span><span class="p">()</span>
            <span class="p">{</span>
            <span class="n">Order</span> <span class="p">=</span> <span class="n">orderInput</span><span class="p">,</span>
            <span class="n">Filter</span> <span class="p">=</span> <span class="n">filterInput</span><span class="p">,</span>
            <span class="n">NonFilter</span> <span class="p">=</span> <span class="n">nonFilterInput</span>
            <span class="p">};</span>
            <span class="n">myQueryable</span> <span class="p">=</span> <span class="n">myQueryable</span><span class="p">.</span><span class="nf">Filter</span><span class="p">(</span><span class="n">orderFilterNonFilterInput</span><span class="p">);</span>
</code></pre>
        </div>

        <h2 id="paginginput">PagingInput</h2>

        <p>If you want to use paging in your filtering you can use PagingInput object :</p>

        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code> <span class="kt">var</span> <span class="n">paging</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PagingInput</span>
            <span class="p">{</span>
            <span class="n">Page</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span>
            <span class="n">Size</span> <span class="p">=</span> <span class="m">10</span>
            <span class="p">};</span>
			
            <span class="n">myQueryable</span> <span class="p">=</span> <span class="n">myQueryable</span><span class="p">.</span><span class="nf">Paging</span><span class="p">(</span><span class="n">paging</span><span class="p">);</span>
</code></pre>
        </div>

        <h2 id="dynamicquerynetinput">DynamicQueryNetInput</h2>

        <p>All of the above-mentioned capabilities can be achieved by using a DynamicQueryNetInput object as a parameter to the Filter() extension method:</p>

        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code>         <span class="kt">var</span> <span class="n">dynamicQueryNetInput</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicQueryNetInput</span><span class="p">()</span>
            <span class="p">{</span>
            <span class="n">Order</span> <span class="p">=</span> <span class="n">orderInput</span><span class="p">,</span>
            <span class="n">Filter</span> <span class="p">=</span> <span class="n">filterInput</span><span class="p">,</span>
            <span class="n">NonFilter</span> <span class="p">=</span> <span class="n">nonFilterInput</span><span class="p">,</span>
            <span class="n">Paging</span> <span class="p">=</span> <span class="n">paging</span>
            <span class="p">};</span>
			
            <span class="n">myQueryable</span> <span class="p">=</span> <span class="n">myQueryable</span><span class="p">.</span><span class="nf">Filter</span><span class="p">(</span><span class="n">dynamicQueryNetInput</span><span class="p">);</span>
	
</code></pre>
        </div>

        <h2 id="create-simple-rest-apis">Create simple REST APIs:</h2>

        <p>In the client side send a JSON to the server:</p>

        <div class="language-json highlighter-rouge">
            <pre class="highlight"><code><span class="w">	</span><span class="p">{</span><span class="w">
      </span><span class="nt">"Filter"</span><span class="p">:[{</span><span class="nt">"Property"</span><span class="p">:</span><span class="s2">"ContactNumber"</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="nt">"Value"</span><span class="p">:</span><span class="mi">2</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="nt">"Type"</span><span class="p">:</span><span class="s2">"Number"</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="nt">"Operation"</span><span class="p">:</span><span class="s2">"Equal"</span><span class="p">}],</span><span class="w">
    	</span><span class="nt">"Order"</span><span class="p">:[{</span><span class="nt">"Property"</span><span class="p">:</span><span class="s2">"Date"</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="nt">"Order"</span><span class="p">:</span><span class="s2">"Desc"</span><span class="p">}],</span><span class="w">
    	</span><span class="nt">"NonFilter"</span><span class="p">:{</span><span class="nt">"Calculate"</span><span class="p">:</span><span class="s2">"True"</span><span class="p">},</span><span class="w">
        </span><span class="nt">"Paging"</span><span class="p">:{</span><span class="nt">"Page"</span><span class="p">:</span><span class="mi">3</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="nt">"Size"</span><span class="p">:</span><span class="mi">10</span><span class="p">}</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span></code></pre>
        </div>

        <p>In the server just use it in .Filter() Method:</p>

        <div class="language-cs highlighter-rouge">
            <pre class="highlight"><code>  <span class="k">public</span> <span class="n">HttpResponseMessage</span> <span class="nf">Filter</span><span class="p">(</span><span class="n">DynamicQueryNetInput</span> <span class="n">dynamicQueryNetInput</span><span class="p">)</span>
            <span class="p">{</span>
            <span class="k">return</span> <span class="n">Request</span><span class="p">.</span><span class="nf">CreateResponse</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">OK</span><span class="p">,</span> <span class="n">myQueryable</span><span class="p">.</span><span class="nf">Filter</span><span class="p">(</span><span class="n">dynamicQueryNetInput</span><span class="p">));</span>
            <span class="p">}</span>
</code></pre>
        </div>

        <h4 style="text-align: center;">I Hope this will be Helpful</h4>



        <footer class="site-footer">

            <span class="site-footer-owner"><a href="https://github.com/NasirJafarzadeh/DynamicQuery.Net">DynamicQuery.Net</a> is maintained by <a href="https://github.com/NasirJafarzadeh">NasirJafarzadeh</a>.</span>

            <span class="site-footer-credits">This page was generated by <a href="https://pages.github.com/">GitHub Pages</a>.</span>
        </footer>
    </section>




</body>
</html>